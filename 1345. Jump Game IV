class Solution {
    public int minJumps(int[] arr) {
        int n = arr.length;
        
        // create a map to store all indices of each value in the array
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (!map.containsKey(arr[i])) {
                map.put(arr[i], new ArrayList<>());
            }
            map.get(arr[i]).add(i);
        }
        
        // initialize the BFS queue with the starting index 0
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(0);
        
        // initialize an array to keep track of visited indices
        boolean[] visited = new boolean[n];
        visited[0] = true;
        
        // initialize the number of steps to reach the last index
        int steps = 0;
        
        while (!queue.isEmpty()) {
            int size = queue.size();
            
            // process all nodes at the current level
            for (int i = 0; i < size; i++) {
                int curr = queue.poll();
                
                // if we reach the last index, return the number of steps
                if (curr == n - 1) {
                    return steps;
                }
                
                // add the next indices that can be reached by one step
                if (curr + 1 < n && !visited[curr + 1]) {
                    visited[curr + 1] = true;
                    queue.offer(curr + 1);
                }
                if (curr - 1 >= 0 && !visited[curr - 1]) {
                    visited[curr - 1] = true;
                    queue.offer(curr - 1);
                }
                
                // add all indices that have the same value as the current index
                if (map.containsKey(arr[curr])) {
                    for (int next : map.get(arr[curr])) {
                        if (!visited[next]) {
                            visited[next] = true;
                            queue.offer(next);
                        }
                    }
                    // clear the list to avoid redundant search
                    map.get(arr[curr]).clear();
                }
            }
            // increment the number of steps for each level
            steps++;
        }
        
        // cannot reach the last index
        return -1;
    }
}
