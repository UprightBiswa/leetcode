class Solution {
    public int minReorder(int n, int[][] connections) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }
        boolean[] visited = new boolean[n];
        int count = 0;
        for (int[] conn : connections) {
            graph.get(conn[0]).add(conn[1]);
            graph.get(conn[1]).add(-conn[0]);
        }
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(0);
        visited[0] = true;
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            for (int neighbor : graph.get(curr)) {
                if (!visited[Math.abs(neighbor)]) {
                    if (neighbor > 0) {
                        count++;
                    }
                    visited[Math.abs(neighbor)] = true;
                    queue.offer(Math.abs(neighbor));
                }
            }
        }
        return count;
    }
}
