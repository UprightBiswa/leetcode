/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head == null || head.next == null) return null; // no cycle
        
        ListNode slow = head;
        ListNode fast = head;
        
        // Floyd's cycle-finding algorithm
        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            
            if(slow == fast) {
                // cycle found, reset slow pointer to head and move both slow and fast one step at a time
                slow = head;
                while(slow != fast) {
                    slow = slow.next;
                    fast = fast.next;
                }
                return slow; // node where the cycle begins
            }
        }
        
        return null; // no cycle
    }
}
